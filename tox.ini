[tox]
skip_missing_interpreters = True
envlist =
    py26,py27,py32,py33,py34,py35,pypy,pypy3

[testenv]
deps =
commands =
    pip install flake8==2.1.0 pep8==1.5.6
    flake8 --version
    python setup.py test -q
    flake8 pyflakes setup.py

[testenv:flake8]
commands =
    flake8 pyflakes setup.py

# These three check_* environments run pyflakes over different sets of
# python code, reporting errors but only failing if pyflakes
# raised an exception while parsing the files.  They are primarily
# intended to be used to ensure that changes to pyflakes have catered
# for source code constructs in the wild, but the results can also
# be used to check that lint errors are being reported only for the
# expected scenarios.
[testenv:check_venv]
skip_install = True
commands =
    python -c "import os; print('Checking %s' % os.getenv('VIRTUAL_ENV'))"
    python -c "import os, pyflakes.api; os.chdir(os.getenv('VIRTUAL_ENV')); pyflakes.api.checkRecursive(['.']);"

[testenv:check_python_tests]
skip_install = True
sitepackages = True
commands =
    python -c "import test; print('Checking %s' % test.__path__[0])"
    python -c "import os, test, pyflakes.api; os.chdir(test.__path__[0]); pyflakes.api; pyflakes.api.checkRecursive(['.']);"

[testenv:check_python_env]
skip_install = True
sitepackages = True
commands =
    python -c "import os.path, test; print('Checking %s' % os.path.dirname(test.__path__[0]))"
    python -c "import os, test, pyflakes.api; os.chdir(os.path.dirname(test.__path__[0])); pyflakes.api; pyflakes.api.checkRecursive(['.']);" > check_python_env.out

[flake8]
select = E,F,W
builtins = unicode
max_line_length = 89
